openapi: 3.0.1
info:
  title: Лабораторна робота. Варіант №3
  description: 'Створити сервіс оголошень + CRUD із двома рівнями повідомлень. Оголошення повинні бути локальними та публічними. Локальні оголошення тільки для користувачів, що знаходяться в тому ж місці. Публічні для всіх, навіть для не користувачів сервісу.'
  
  version: 1.0.0
externalDocs:
  description: GitHub repository
  url: https://github.com/Patsu-rar/AP

tags:
- name: advertisement
  description: Everything about your adds
- name: user
  description: Operations about user
  
paths:
  /advertisement:
    post:
      tags:
      - advertisement
      summary: Add a new advertisement to the service
      description: This can only be done by the logged in user.
      operationId: addAdvertisement
      requestBody:
        description: Advertisement object that needs to be added to the service
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Advertisement'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
        200:
          description: "successful operation. User is registered"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Advertisement'
      security:
      - basicAuth: []
    get:
      tags:
      - advertisement
      summary: Find Advertisements
      operationId: findAdvertisements
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Advertisement'


  /advertisement/byRegion:
    post:
      tags:
      - advertisement
      summary: Add a new advertisement to the service by region
      description: This can only be done by the logged in user.
      operationId: addAdvertisementByRegion
      requestBody:
        description: Advertisement object that needs to be added to the service
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Advertisement'
        required: true
      responses:
        200:
          description: "successful operation. User is registered"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Advertisement'
        405:
          description: Invalid input
          content: {}
      security:
      - basicAuth: []
    get:
      tags:
      - advertisement
      summary: Finds Advertisements by region
      description: Region should be provided as string value without spaces,
        and can only be done by the logged in user.
      operationId: findAdvertisementsByRegion
      parameters:
      - name: region
        in: query
        description: Region values that need to be considered for filter
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Advertisement'
      security:
      - basicAuth: [] 
  /advertisement/{addId}:
    delete:
      tags:
      - advertisement
      summary: Delete advertisement by ID
      description: This can only be done by the logged in user.
      operationId: deleteAdd
      parameters:
      - name: addId
        in: path
        description: ID of the advertisement that needs to be deleted
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID
          content: {}
        404:
          description: Advertisement not found
          content: {}
      security:
      - basicAuth: []
    put:
      tags:
      - advertisement
      summary: Update an existing Advertisement
      description: This can only be done by the logged in user.
      operationId: updateAdvertisement
      parameters:
      - name: addId
        in: path
        description: Advertisement that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Advertisement'
        required: true
      responses:
        400:
          description: Invalid advertisement ID 
          content: {}
        404:
          description: Advertisement not found
          content: {}
      security:
      - basicAuth: []
  /auth/register:
    post:
      tags:
      - auth
      summary: Register new user
      operationId: registerUser
      requestBody:
        description: User with data to be registered
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: "successful operation. User is registered"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: "User with such username already exists"
      
  /auth/login:
    post:
      tags:
      - auth
      summary: Logs in user with provided credentials
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The username
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The user's password (plain text)
        required: true
        schema:
          type: string
      responses:
        200:
          description: "successful operation." 
        401:
          $ref: '#/components/responses/InvalidCredentialsError'
  
  /auth/logout:
    post:
      tags:
      - auth
      summary: Logs current user out of session
      operationId: logoutUser
      responses:
        200:
          description: "successful operation"
        401:
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - basicAuth: []
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserToGet'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - basicAuth: []

components:
  schemas:
    Advertisement:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        text:
          type: string
        dateOfPublishing:
          type: string
          format: date-time
        status:
          type: string
          description: Advertisement Status
          enum:
          - open
          - close
        region:
          $ref: '#/components/schemas/Region'
      xml:
        name: Advertisement
    Region:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Region
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        region:
          $ref: '#/components/schemas/Region'
      xml:
        name: User
    UserToGet:
      type: object
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        region:
          $ref: '#/components/schemas/Region'
      xml:
        name: User
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
    InvalidCredentialsError:
      description: "Provided credentials are invalid"
